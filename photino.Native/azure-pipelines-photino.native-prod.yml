# Build Photino.Native project from production branch in GitHub
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  major: 2
  minor: 3 
  patch: $[counter(variables['minor'], 0)] #this will reset when we bump minor
  buildConfiguration: 'Release'

jobs:
  - job: 'Build'
    strategy:
      matrix:
        # Windows
        windows-intel:
          rid: 'win-x64'
          imageName: 'windows-latest'
        # No build machine for Windows ARM64 available as of Sep 2022
        windows-arm64:
          rid: 'win-arm64'
          imageName: 'windows-latest'
        
        # Linux
        linux-intel:
          rid: 'linux-x64'
          imageName: 'ubuntu-latest'
        linux-arm64:
          rid: 'linux-arm64'
          imageName: 'ubuntu-latest'

        # macOS
        mac-intel:
          rid: 'osx.12-x64'
          imageName: 'macos-12'
        # No build machine for macOS ARM64 available as of Sep 2022
        mac-arm64:
          rid: 'osx.12-arm64'
          imagename: 'macos-12'

    pool:
      vmImage: $(imageName)

    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Windows (x64) nuspec to artifacts'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        targetPath: './Photino.Native/Photino.Native.nuspec'
        artifactName: NuspecArtifact

    # Windows x64
    - task: NuGetCommand@2
      displayName: 'NuGet package restore for Windows (x64)'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        command: 'restore'
        restoreSolution: 'Photino.Native.sln'
        feedsToUse: 'select'

    - task: VSBuild@1
      displayName: 'Build Windows (x64) native assets'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        solution: 'Photino.Native.sln'
        platform: 'x64'
        msbuildArchitecture: 'x64'
        configuration: '$(buildConfiguration)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Windows (x64) libraries to artifacts'
      condition: eq(variables.rid, 'win-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)'
        artifactName: WindowsIntelArtifact

    # Windows ARM64
    - task: NuGetCommand@2
      displayName: 'NuGet package restore for Windows (ARM64)'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        command: 'restore'
        restoreSolution: 'Photino.Native.sln'
        feedsToUse: 'select'

    - task: VSBuild@1
      displayName: 'Build Windows (ARM64) native assets'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        solution: 'Photino.Native.sln'
        platform: 'ARM64'
        msbuildArchitecture: 'ARM64'
        configuration: '$(buildConfiguration)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Windows (ARM64) libraries to artifacts'
      condition: eq(variables.rid, 'win-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)'
        artifactName: WindowsArm64Artifact

    # Linux x64
    - task: CmdLine@2
      displayName: 'Build Linux (x64) native assets'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        workingDirectory: '.'
        script: |
          mkdir -p ./Photino.Native/x64/$(buildConfiguration)
          make linux-dev
          mv ./lib/dev/Photino.Native.so ./Photino.Native/x64/$(buildConfiguration)/Photino.Native.so

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux (x64) libraries to artifacts'
      condition: eq(variables.rid, 'linux-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)'
        artifactName: LinuxIntelArtifact

    # Linux ARM64
    - task: CmdLine@2
      displayName: 'Build Linux (ARM64) native assets'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        workingDirectory: '.'
        script: |
          mkdir -p ./Photino.Native/arm64/$(buildConfiguration)
          make linux-dev
          mv ./lib/dev/Photino.Native.so ./Photino.Native/arm64/$(buildConfiguration)/Photino.Native.so

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux (ARM64) libraries to artifacts'
      condition: eq(variables.rid, 'linux-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)'
        artifactName: LinuxArm64Artifact

    # macOS x64
    - task: CmdLine@2
      displayName: 'Build macOS (x64) native assets'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        workingDirectory: '.'
        script: |
          mkdir -p ./Photino.Native/x64/$(buildConfiguration)
          make mac-dev
          mv ./lib/dev/Photino.Native.dylib ./Photino.Native/x64/$(buildConfiguration)/Photino.Native.dylib

    - task: PublishPipelineArtifact@1
      displayName: 'Publish macOS (x64) libraries to artifacts'
      condition: eq(variables.rid, 'osx.12-x64')
      inputs:
        targetPath: './Photino.Native/x64/$(buildConfiguration)/Photino.Native.dylib'
        artifactName: MacOsIntelArtifact

    # macOS ARM64
    - task: CmdLine@2
      displayName: 'Build macOS (ARM64) native assets'
      condition: eq(variables.rid, 'osx.12-arm64')
      inputs:
        workingDirectory: '.'
        script: |
          mkdir -p ./Photino.Native/arm64/$(buildConfiguration)
          make mac-dev
          mv ./lib/dev/Photino.Native.dylib ./Photino.Native/arm64/$(buildConfiguration)/Photino.Native.dylib

    - task: PublishPipelineArtifact@1
      displayName: 'Publish macOS (ARM64) libraries to artifacts'
      condition: eq(variables.rid, 'osx.12-arm64')
      inputs:
        targetPath: './Photino.Native/arm64/$(buildConfiguration)/Photino.Native.dylib'
        artifactName: MacOsArm64Artifact

  # 1 instance to download all native files, create NuGet package and publish to Artifacts
  - job: 'PublishPackage'
    dependsOn: 'Build'
    
    pool:
      vmImage: 'windows-latest'
    
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download nuspec file from WindowsIntelArtifact'
      inputs:
        artifact: 'NuspecArtifact'
        patterns: '**/*.nuspec'
        targetPath: '$(Pipeline.Workspace)/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download WindowsIntelArtifact'
      inputs:
        artifact: WindowsIntelArtifact
        patterns: '**/*.dll'
        targetPath: '$(Pipeline.Workspace)/x64/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download WindowsArm64Artifact'
      inputs:
        artifact: WindowsArm64Artifact
        patterns: '**/*.dll'
        targetPath: '$(Pipeline.Workspace)/arm64/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download LinuxIntelArtifact'
      inputs:
        artifact: LinuxIntelArtifact
        patterns: '**/*.so'
        targetPath: '$(Pipeline.Workspace)/x64/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download LinuxArm64Artifact'
      inputs:
        artifact: LinuxArm64Artifact
        patterns: '**/*.so'
        targetPath: '$(Pipeline.Workspace)/arm64/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download MacOsIntelArtifact'
      inputs:
        artifact: MacOsIntelArtifact
        patterns: '**/*.dylib'
        targetPath: '$(Pipeline.Workspace)/x64/'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download MacOsArm64Artifact'
      inputs:
        artifact: MacOsArm64Artifact
        patterns: '**/*.dylib'
        targetPath: '$(Pipeline.Workspace)/arm64/'

    - task: CmdLine@2
      displayName: 'List downloaded files'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        script: 'dir'

    - task: CmdLine@2
      displayName: 'List downloaded x64 libraries'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)/x64'
        script: 'dir'

    - task: CmdLine@2
      displayName: 'List downloaded arm64 libraries'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)/arm64'
        script: 'dir'

    # Create NuGet package
    - task: CmdLine@2
      displayName: 'Create NuGet package'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        script: 'nuget.exe pack Photino.Native.nuspec -Version $(major).$(minor).$(patch) -NonInteractive -Properties version=$(major).$(minor).$(patch)'

    # Uploads the NuGet package file to nuget.org
    # Important notes:
    # 1. For this to work, you need to create a 'service connection' with the same name
    #    as the 'publishFeedCredentials' value.
    # 2. For security, you *must* ensure that 'Make secrets available to builds of forks'
    #    is disabled in your PR validation settings (inside build -> Edit -> Triggers).
    #    Otherwise, PRs would be able to push new packages even without being merged.
    - task: NuGetCommand@2
      displayName: 'Publish to nuget.org'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        command: push
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: 'PhotinoNuGet'
